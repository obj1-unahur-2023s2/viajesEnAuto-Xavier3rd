import clientes.*
import remiseras.*

describe "Testing Roxana"{

	test "Precio del viaje a Ludmila 10 kilometros" {
		assert.equals(180, roxana.precioViaje(ludmila, 10))
	}
	
	test "Precio del viaje a Ana Maria economicamente estable 10 kilometros" {
		assert.equals(300, roxana.precioViaje(anaMaria, 10))
	}
	
	test "Precio del viaje a Teresa 10 kilometros" {
		assert.equals(220, roxana.precioViaje(teresa, 10))
	}
	
	test "Precio del viaje a Ludmila 2 kilometros" {
		assert.equals(36, roxana.precioViaje(ludmila, 2))
	}
	
	test "Precio del viaje a Ana María economicamente estable 2 kilometros" {
		assert.equals(60, roxana.precioViaje(anaMaria, 2))
	}
	
	test "Precio del viaje a Teresa 2 kilometros" {
		assert.equals(44, roxana.precioViaje(teresa, 2))
	}
}	

describe "Testing Gabriela"{
	
	test "Precio del viaje a Ludmila 10 kilometros"{
		gabriela.precioViaje(ludmila, 10)
		assert.equals(216, gabriela.precioViaje(ludmila, 10))
	}
	
	test "Precio del viaje a Ana Maria economicamente estable 10 kilometros" {
		assert.equals(360, gabriela.precioViaje(anaMaria, 10))
	}
	
	test "Precio del viaje a Teresa 10 kilometros" {
		assert.equals(264, gabriela.precioViaje(teresa, 10))
	}
	
	test "Precio del viaje a Ludmila 2 kilometros" {
		assert.equals(43.2, gabriela.precioViaje(ludmila, 2))
	}
	
	test "Precio del viaje a Ana María economicamente estable 2 kilometros" {
		assert.equals(72, gabriela.precioViaje(anaMaria, 2))
	}
	
	test "Precio del viaje a Teresa 2 kilometros" {
		assert.equals(52.8, gabriela.precioViaje(teresa, 2))
	}
}


describe "Testing Lucia" {
	
	test "No se puede reemplazar a si misma" {
		assert.throwsExceptionWithMessage(
			"No se puede reemplazar a si misma", 
			{lucia.estaReemplazando(lucia)}
		)
	}
	
	test "Reemplaza a Roxana" {
		assert.doesNotThrowException(
			{lucia.estaReemplazando(roxana)}
		)
	}
	
	test "Viaje como si fuese Roxana" {
		lucia.estaReemplazando(roxana)
		assert.equals(180, lucia.precioViaje(ludmila, 10))
	}
}




